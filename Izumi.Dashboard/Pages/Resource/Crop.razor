@page "/resource/crop"
@inject HttpClient _http;
@inject ISnackbar _snackbar;

<MudTable Items="_crops"
          CanCancelEdit="@true"
          @bind-SelectedItem="_selected"
          RowEditPreview="Backup"
          RowEditCancel="Reset"
          RowEditCommit="Save">
    <HeaderContent>
        <MudTh>Emote</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>IncId</MudTh>
        <MudTh>Id</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <img src="https://cdn.discordapp.com/emojis/@_emotes.GetEmoteId(context.Name)" alt="icon" width="30" height="30"/>
        </MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Price">@context.Price</MudTd>
        <MudTd DataLabel="AutoIncrementedId">@context.AutoIncrementedId</MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd>
            <img src="https://cdn.discordapp.com/emojis/@_emotes.GetEmoteId(context.Name)" alt="icon" width="50" height="50"/>
        </MudTd>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="@context.Name" Required/>
        </MudTd>
        <MudTd DataLabel="Price">
            <MudTextField @bind-Value="@context.Price" Required/>
        </MudTd>
        <MudTd DataLabel="AutoIncrementedId">@context.AutoIncrementedId</MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
    </RowEditingTemplate>
</MudTable>

@code {
    private CropClient _cropClient;
    private ICollection<CropDto> _crops;
    private CropDto _selected;
    private CropDto _backup;

    private EmoteClient _emoteClient;
    private IDictionary<string, EmoteDto> _emotes;

    protected override async Task OnInitializedAsync()
    {
        _cropClient = new CropClient(_http);
        _crops = await _cropClient.GetCropsAsync();
        _emoteClient = new EmoteClient(_http);
        _emotes = await _emoteClient.GetEmotesAsync();
    }

    private void Backup(object element)
    {
        var crop = (CropDto) element;

        _backup = new CropDto
        {
            Id = crop.Id,
            AutoIncrementedId = crop.AutoIncrementedId,
            Name = crop.Name,
            Price = crop.Price
        };
    }

    private async void Save(object element)
    {
        var crop = (CropDto) element;

        try
        {
            await _cropClient.UpdateCropAsync(new UpdateCropCommand
            {
                Id = crop.Id,
                Name = crop.Name,
                Price = crop.Price
            });

            _snackbar.Add("Урожай успешно обновлен");
        }
        catch (Exception e)
        {
            Reset(element);
            _snackbar.Add(e.Message);
        }
    }

    private void Reset(object element)
    {
        var crop = (CropDto) element;

        if (crop is null) return;

        crop.Id = _backup.Id;
        crop.AutoIncrementedId = _backup.AutoIncrementedId;
        crop.Name = _backup.Name;
        crop.Price = _backup.Price;
    }

}
