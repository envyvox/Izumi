@page "/resource/drink"
@inject HttpClient _http;
@inject ISnackbar _snackbar;

<MudTable Items="_drinks"
          CanCancelEdit="@true"
          @bind-SelectedItem="_selected"
          RowEditPreview="Backup"
          RowEditCancel="Reset"
          RowEditCommit="Save">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>IncId</MudTh>
        <MudTh>Id</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="AutoIncrementedId">@context.AutoIncrementedId</MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="@context.Name" Required/>
        </MudTd>
        <MudTd DataLabel="AutoIncrementedId">@context.AutoIncrementedId</MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
    </RowEditingTemplate>
    <ChildRowContent>
        <MudTr>
            <td colspan="12">
                <MudExpansionPanel Text="Ingredients"
                                   Elevation="0"
                                   Style="background-color: #31313b">
                    <MudTable Items="@context.Ingredients"
                              Context="IngredientContext">
                        <HeaderContent>
                            <MudTh>Category</MudTh>
                            <MudTh>Id</MudTh>
                            <MudTh>Amount</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Category">@IngredientContext.Category</MudTd>
                            <MudTd DataLabel="Property">@IngredientContext.Id</MudTd>
                            <MudTd DataLabel="Amount">@IngredientContext.Amount</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudExpansionPanel>
            </td>
        </MudTr>
    </ChildRowContent>
</MudTable>

@code {
    private DrinkClient _client;

    private ICollection<DrinkDto> _drinks;
    private DrinkDto _selected;
    private DrinkDto _backup;

    protected override async Task OnInitializedAsync()
    {
        _client = new DrinkClient(_http);
        _drinks = await _client.GetDrinksAsync();
    }

    private void Backup(object element)
    {
        var drink = (DrinkDto) element;

        _backup = new DrinkDto
        {
            Id = drink.Id,
            AutoIncrementedId = drink.AutoIncrementedId,
            Name = drink.Name
        };
    }

    private async void Save(object element)
    {
        var drink = (DrinkDto) element;

        try
        {
            await _client.UpdateDrinkAsync(new UpdateDrinkCommand
            {
                Id = drink.Id,
                Name = drink.Name
            });

            _snackbar.Add("Напиток успешно обновлен");
        }
        catch (Exception e)
        {
            Reset(element);
            _snackbar.Add(e.Message);
        }
    }

    private void Reset(object element)
    {
        var drink = (DrinkDto) element;

        drink.Id = _backup.Id;
        drink.AutoIncrementedId = _backup.AutoIncrementedId;
        drink.Name = _backup.Name;
    }

}
