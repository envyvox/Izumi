@page "/resource/crafting"
@inject HttpClient _http;
@inject ISnackbar _snackbar;

<MudTable Items="_craftings"
          CanCancelEdit="@true"
          @bind-SelectedItem="_selected"
          RowEditPreview="Backup"
          RowEditCancel="Reset"
          RowEditCommit="Save">
    <HeaderContent>
        <MudTh>Emote</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>IncId</MudTh>
        <MudTh>Id</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <img src="https://cdn.discordapp.com/emojis/@_emotes.GetEmoteId(context.Name)" alt="icon" width="30" height="30"/>
        </MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="AutoIncrementedId">@context.AutoIncrementedId</MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd>
            <img src="https://cdn.discordapp.com/emojis/@_emotes.GetEmoteId(context.Name)" alt="icon" width="50" height="50"/>
        </MudTd>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="@context.Name" Required/>
        </MudTd>
        <MudTd DataLabel="AutoIncrementedId">@context.AutoIncrementedId</MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
    </RowEditingTemplate>
    <ChildRowContent>
        <MudTr>
            <td colspan="12">
                <MudTabs Elevation="2"
                         Rounded="true"
                         ApplyEffectsToContainer="true"
                         PanelClass="pa-6"
                         Style="background-color: #31313b">
                    <MudTabPanel Text="Properties">
                        <MudTable Items="@context.Properties"
                                  CanCancelEdit="@true"
                                  Context="PropContext"
                                  @bind-SelectedItem="_selectedProp"
                                  RowEditPreview="BackupProp"
                                  RowEditCancel="ResetProp"
                                  RowEditCommit="SaveProp">
                            <HeaderContent>
                                <MudTh>Property</MudTh>
                                <MudTh>Value</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Property">@PropContext.Property</MudTd>
                                <MudTd DataLabel="Value">@PropContext.Value</MudTd>
                            </RowTemplate>
                            <RowEditingTemplate>
                                <MudTd DataLabel="Property">@PropContext.Property</MudTd>
                                <MudTd DataLabel="Value">
                                    <MudTextField @bind-Value="@PropContext.Value" Required/>
                                </MudTd>
                            </RowEditingTemplate>
                        </MudTable>
                    </MudTabPanel>
                    <MudTabPanel Text="Ingredients">
                        <MudTable Items="@context.Ingredients"
                                  Context="IngredientContext">
                            <HeaderContent>
                                <MudTh>Category</MudTh>
                                <MudTh>Id</MudTh>
                                <MudTh>Amount</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Category">@IngredientContext.Category</MudTd>
                                <MudTd DataLabel="Property">@IngredientContext.Id</MudTd>
                                <MudTd DataLabel="Amount">@IngredientContext.Amount</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudTabPanel>
                </MudTabs>
            </td>
        </MudTr>
    </ChildRowContent>
</MudTable>

@code {
    private CraftingClient _craftingClient;
    private ICollection<CraftingDto> _craftings;
    private CraftingDto _selected;
    private CraftingDto _backup;
    private CraftingProperty _selectedProp;
    private CraftingProperty _backupProp;

    private EmoteClient _emoteClient;
    private IDictionary<string, EmoteDto> _emotes;

    protected override async Task OnInitializedAsync()
    {
        _craftingClient = new CraftingClient(_http);
        _craftings = await _craftingClient.GetCraftingsAsync();
        _emoteClient = new EmoteClient(_http);
        _emotes = await _emoteClient.GetEmotesAsync();
    }

    private void Backup(object element)
    {
        var crafting = (CraftingDto) element;

        _backup = new CraftingDto
        {
            Id = crafting.Id,
            AutoIncrementedId = crafting.AutoIncrementedId,
            Name = crafting.Name
        };
    }

    private async void Save(object element)
    {
        var crafting = (CraftingDto) element;

        try
        {
            await _craftingClient.UpdateCraftingAsync(new UpdateCraftingCommand
            {
                Id = crafting.Id,
                Name = crafting.Name
            });

            _snackbar.Add("Изготавливаемый предмет успешно обновлен");
        }
        catch (Exception e)
        {
            Reset(element);
            _snackbar.Add(e.Message);
        }
    }

    private void Reset(object element)
    {
        var crafting = (CraftingDto) element;

        if (crafting is null) return;

        crafting.Id = _backup.Id;
        crafting.AutoIncrementedId = _backup.AutoIncrementedId;
        crafting.Name = _backup.Name;
    }

    private void BackupProp(object element)
    {
        var prop = (CraftingProperty) element;

        _backupProp = new CraftingProperty
        {
            Property = prop.Property,
            Value = prop.Value
        };
    }

    private async void SaveProp(object element)
    {
        var prop = (CraftingProperty) element;

        try
        {
            await _craftingClient.UpdateCraftingPropertyAsync(new UpdateCraftingPropertyCommand
            {
                CraftingId = prop.CraftingId,
                Property = prop.Property,
                Value = prop.Value
            });

            _snackbar.Add("Свойство изготавливаемого предмета успешно обновлено");
        }
        catch (Exception e)
        {
            ResetProp(element);
            _snackbar.Add(e.Message);
        }
    }

    private void ResetProp(object element)
    {
        var prop = (CraftingProperty) element;

        if (prop is null) return;

        prop.Property = _backupProp.Property;
        prop.Value = _backupProp.Value;
    }

}
