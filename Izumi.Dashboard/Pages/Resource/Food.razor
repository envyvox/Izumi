@page "/resource/food"
@inject HttpClient _http;
@inject ISnackbar _snackbar;

<MudTable Items="_foods"
          CanCancelEdit="@true"
          @bind-SelectedItem="_selected"
          RowEditPreview="Backup"
          RowEditCancel="Reset"
          RowEditCommit="Save">
    <HeaderContent>
        <MudTh>Emote</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Category</MudTh>
        <MudTh>RecipeSellable</MudTh>
        <MudTh>IsSpecial</MudTh>
        <MudTh>IncId</MudTh>
        <MudTh>Id</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <img src="https://cdn.discordapp.com/emojis/@_emotes.GetEmoteId(context.Name)" alt="icon" width="30" height="30"/>
        </MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Category">@context.Category</MudTd>
        <MudTd DataLabel="RecipeSellable">
            <MudCheckBox ReadOnly="@true" @bind-Checked="@context.RecipeSellable"/>
        </MudTd>
        <MudTd DataLabel="IsSpecial">
            <MudCheckBox ReadOnly="@true" @bind-Checked="@context.IsSpecial"/>
        </MudTd>
        <MudTd DataLabel="AutoIncrementedId">@context.AutoIncrementedId</MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd>
            <img src="https://cdn.discordapp.com/emojis/@_emotes.GetEmoteId(context.Name)" alt="icon" width="50" height="50"/>
        </MudTd>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="@context.Name" Required/>
        </MudTd>
        <MudTd DataLabel="Category">
            <MudSelect @bind-Value="@context.Category">
                @foreach (FoodCategoryType category in Enum.GetValues(typeof(FoodCategoryType)))
                {
                    <MudSelectItem Value="@category">@category</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="RecipeSellable">
            <MudCheckBox @bind-Checked="@context.RecipeSellable"/>
        </MudTd>
        <MudTd DataLabel="IsSpecial">
            <MudCheckBox @bind-Checked="@context.IsSpecial"/>
        </MudTd>
        <MudTd DataLabel="AutoIncrementedId">@context.AutoIncrementedId</MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
    </RowEditingTemplate>
    <ChildRowContent>
        <MudTr>
            <td colspan="12">
                <MudExpansionPanel Text="Ingredients"
                                   Elevation="0"
                                   Style="background-color: #31313b">
                    <MudTable Items="@context.Ingredients"
                              Context="IngredientContext">
                        <HeaderContent>
                            <MudTh>Category</MudTh>
                            <MudTh>Id</MudTh>
                            <MudTh>Amount</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Category">@IngredientContext.Category</MudTd>
                            <MudTd DataLabel="Id">@IngredientContext.IngredientId</MudTd>
                            <MudTd DataLabel="Amount">@IngredientContext.Amount</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudExpansionPanel>
            </td>
        </MudTr>
    </ChildRowContent>
</MudTable>

@code {
    private FoodClient _foodClient;
    private ICollection<FoodDto> _foods;
    private FoodDto _selected;
    private FoodDto _backup;

    private EmoteClient _emoteClient;
    private IDictionary<string, EmoteDto> _emotes;

    protected override async Task OnInitializedAsync()
    {
        _foodClient = new FoodClient(_http);
        _foods = await _foodClient.GetFoodsAsync();
        _emoteClient = new EmoteClient(_http);
        _emotes = await _emoteClient.GetEmotesAsync();
    }

    private void Backup(object element)
    {
        var food = (FoodDto) element;

        _backup = new FoodDto
        {
            Id = food.Id,
            AutoIncrementedId = food.AutoIncrementedId,
            Name = food.Name,
            Category = food.Category,
            RecipeSellable = food.RecipeSellable,
            IsSpecial = food.IsSpecial
        };
    }

    private async void Save(object element)
    {
        var food = (FoodDto) element;

        try
        {
            await _foodClient.UpdateFoodAsync(new UpdateFoodCommand
            {
                Id = food.Id,
                Name = food.Name,
                Category = food.Category,
                RecipeSellable = food.RecipeSellable,
                IsSpecial = food.IsSpecial
            });

            _snackbar.Add("Блюдо успешно обновлено");
        }
        catch (Exception e)
        {
            Reset(element);
            _snackbar.Add(e.Message);
        }
    }

    private void Reset(object element)
    {
        var food = (FoodDto) element;

        if (food is null) return;

        food.Id = _backup.Id;
        food.AutoIncrementedId = _backup.AutoIncrementedId;
        food.Name = _backup.Name;
        food.Category = _backup.Category;
        food.RecipeSellable = _backup.RecipeSellable;
        food.IsSpecial = _backup.IsSpecial;
    }

}
