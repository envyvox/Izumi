// <auto-generated />
using System;
using Izumi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Izumi.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211109132934_CreateDynamicShopRecipeEntity")]
    partial class CreateDynamicShopRecipeEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Izumi.Data.Entities.Achievement", b =>
                {
                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<byte>("Category")
                        .HasColumnType("smallint")
                        .HasColumnName("category");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("RewardNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("reward_number");

                    b.Property<byte>("RewardType")
                        .HasColumnType("smallint")
                        .HasColumnName("reward_type");

                    b.HasKey("Type")
                        .HasName("pk_achievements");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasDatabaseName("ix_achievements_type");

                    b.ToTable("achievements");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Banner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<byte>("Rarity")
                        .HasColumnType("smallint")
                        .HasColumnName("rarity");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_banners");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_banners_name");

                    b.ToTable("banners");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Building", b =>
                {
                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<byte>("Category")
                        .HasColumnType("smallint")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Type")
                        .HasName("pk_buildings");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasDatabaseName("ix_buildings_type");

                    b.ToTable("buildings");
                });

            modelBuilder.Entity("Izumi.Data.Entities.BuildingIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<byte>("BuildingType")
                        .HasColumnType("smallint")
                        .HasColumnName("building_type");

                    b.Property<byte>("Category")
                        .HasColumnType("smallint")
                        .HasColumnName("category");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid")
                        .HasColumnName("ingredient_id");

                    b.HasKey("Id")
                        .HasName("pk_building_ingredients");

                    b.HasIndex("BuildingType", "Category", "IngredientId")
                        .IsUnique()
                        .HasDatabaseName("ix_building_ingredients_building_type_category_ingredient_id");

                    b.ToTable("building_ingredients");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CurrencyReward")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_reward");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<long>("EnergyCost")
                        .HasColumnType("bigint")
                        .HasColumnName("energy_cost");

                    b.Property<byte>("Location")
                        .HasColumnType("smallint")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("ReputationReward")
                        .HasColumnType("bigint")
                        .HasColumnName("reputation_reward");

                    b.HasKey("Id")
                        .HasName("pk_contracts");

                    b.HasIndex("Location")
                        .HasDatabaseName("ix_contracts_location");

                    b.ToTable("contracts");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Discord.ContentMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_content_messages");

                    b.HasIndex("UserId", "ChannelId", "MessageId")
                        .HasDatabaseName("ix_content_messages_user_id_channel_id_message_id");

                    b.ToTable("content_messages");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Discord.ContentVote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<byte>("Vote")
                        .HasColumnType("smallint")
                        .HasColumnName("vote");

                    b.HasKey("Id")
                        .HasName("pk_content_votes");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("ix_content_votes_message_id");

                    b.HasIndex("UserId", "MessageId", "Vote")
                        .HasDatabaseName("ix_content_votes_user_id_message_id_vote");

                    b.ToTable("content_votes");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Discord.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_images");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_images_type");

                    b.ToTable("images");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Discord.UserMute", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<long>("Minutes")
                        .HasColumnType("bigint")
                        .HasColumnName("minutes");

                    b.Property<long>("ModeratorId")
                        .HasColumnType("bigint")
                        .HasColumnName("moderator_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_mutes");

                    b.HasIndex("ModeratorId")
                        .HasDatabaseName("ix_user_mutes_moderator_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_mutes_user_id");

                    b.ToTable("user_mutes");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Discord.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_roles_user_id_role_id");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Discord.UserVoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_voices");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_voices_user_id");

                    b.ToTable("user_voices");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Discord.UserWarn", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<long>("ModeratorId")
                        .HasColumnType("bigint")
                        .HasColumnName("moderator_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_warns");

                    b.HasIndex("ModeratorId")
                        .HasDatabaseName("ix_user_warns_moderator_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_warns_user_id");

                    b.ToTable("user_warns");
                });

            modelBuilder.Entity("Izumi.Data.Entities.DynamicShopBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BannerId")
                        .HasColumnType("uuid")
                        .HasColumnName("banner_id");

                    b.HasKey("Id")
                        .HasName("pk_dynamic_shop_banners");

                    b.HasIndex("BannerId")
                        .IsUnique()
                        .HasDatabaseName("ix_dynamic_shop_banners_banner_id");

                    b.ToTable("dynamic_shop_banners");
                });

            modelBuilder.Entity("Izumi.Data.Entities.DynamicShopRecipe", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_id");

                    b.HasKey("Id")
                        .HasName("pk_dynamic_shop_recipes");

                    b.HasIndex("FoodId")
                        .IsUnique()
                        .HasDatabaseName("ix_dynamic_shop_recipes_food_id");

                    b.ToTable("dynamic_shop_recipes");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Localization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte>("Category")
                        .HasColumnType("smallint")
                        .HasColumnName("category");

                    b.Property<string>("Double")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("double");

                    b.Property<string>("Multiply")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("multiply");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Single")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("single");

                    b.HasKey("Id")
                        .HasName("pk_localizations");

                    b.HasIndex("Category", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_localizations_category_name");

                    b.ToTable("localizations");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Alcohol", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_alcohols");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_alcohols_name");

                    b.ToTable("alcohols");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Crafting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_craftings");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_craftings_name");

                    b.ToTable("craftings");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Crop", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<Guid>("SeedId")
                        .HasColumnType("uuid")
                        .HasColumnName("seed_id");

                    b.HasKey("Id")
                        .HasName("pk_crops");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_crops_name");

                    b.HasIndex("SeedId")
                        .IsUnique()
                        .HasDatabaseName("ix_crops_seed_id");

                    b.ToTable("crops");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_drinks");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_drinks_name");

                    b.ToTable("drinks");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Fish", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CatchSeasons")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("catch_seasons");

                    b.Property<byte>("CatchTimesDay")
                        .HasColumnType("smallint")
                        .HasColumnName("catch_times_day");

                    b.Property<byte>("CatchWeather")
                        .HasColumnType("smallint")
                        .HasColumnName("catch_weather");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<byte>("Rarity")
                        .HasColumnType("smallint")
                        .HasColumnName("rarity");

                    b.HasKey("Id")
                        .HasName("pk_fishes");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_fishes_name");

                    b.ToTable("fishes");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte>("Category")
                        .HasColumnType("smallint")
                        .HasColumnName("category");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("boolean")
                        .HasColumnName("is_special");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("RecipeSellable")
                        .HasColumnType("boolean")
                        .HasColumnName("recipe_sellable");

                    b.HasKey("Id")
                        .HasName("pk_foods");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_foods_name");

                    b.ToTable("foods");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Gathering", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte>("Location")
                        .HasColumnType("smallint")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_gatherings");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_gatherings_name");

                    b.ToTable("gatherings");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Ingredients.AlcoholIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AlcoholId")
                        .HasColumnType("uuid")
                        .HasColumnName("alcohol_id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<byte>("Category")
                        .HasColumnType("smallint")
                        .HasColumnName("category");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid")
                        .HasColumnName("ingredient_id");

                    b.HasKey("Id")
                        .HasName("pk_alcohol_ingredients");

                    b.HasIndex("AlcoholId", "Category", "IngredientId")
                        .HasDatabaseName("ix_alcohol_ingredients_alcohol_id_category_ingredient_id");

                    b.ToTable("alcohol_ingredients");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Ingredients.CraftingIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<byte>("Category")
                        .HasColumnType("smallint")
                        .HasColumnName("category");

                    b.Property<Guid>("CraftingId")
                        .HasColumnType("uuid")
                        .HasColumnName("crafting_id");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid")
                        .HasColumnName("ingredient_id");

                    b.HasKey("Id")
                        .HasName("pk_crafting_ingredients");

                    b.HasIndex("CraftingId", "Category", "IngredientId")
                        .HasDatabaseName("ix_crafting_ingredients_crafting_id_category_ingredient_id");

                    b.ToTable("crafting_ingredients");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Ingredients.DrinkIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<byte>("Category")
                        .HasColumnType("smallint")
                        .HasColumnName("category");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid")
                        .HasColumnName("drink_id");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid")
                        .HasColumnName("ingredient_id");

                    b.HasKey("Id")
                        .HasName("pk_drink_ingredients");

                    b.HasIndex("DrinkId", "Category", "IngredientId")
                        .HasDatabaseName("ix_drink_ingredients_drink_id_category_ingredient_id");

                    b.ToTable("drink_ingredients");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Ingredients.FoodIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<byte>("Category")
                        .HasColumnType("smallint")
                        .HasColumnName("category");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_id");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid")
                        .HasColumnName("ingredient_id");

                    b.HasKey("Id")
                        .HasName("pk_food_ingredients");

                    b.HasIndex("FoodId", "Category", "IngredientId")
                        .HasDatabaseName("ix_food_ingredients_food_id_category_ingredient_id");

                    b.ToTable("food_ingredients");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_products_name");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Properties.AlcoholProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AlcoholId")
                        .HasColumnType("uuid")
                        .HasColumnName("alcohol_id");

                    b.Property<byte>("Property")
                        .HasColumnType("smallint")
                        .HasColumnName("property");

                    b.Property<long>("Value")
                        .HasColumnType("bigint")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_alcohol_properties");

                    b.HasIndex("AlcoholId", "Property")
                        .IsUnique()
                        .HasDatabaseName("ix_alcohol_properties_alcohol_id_property");

                    b.ToTable("alcohol_properties");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Properties.CraftingProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CraftingId")
                        .HasColumnType("uuid")
                        .HasColumnName("crafting_id");

                    b.Property<byte>("Property")
                        .HasColumnType("smallint")
                        .HasColumnName("property");

                    b.Property<long>("Value")
                        .HasColumnType("bigint")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_crafting_properties");

                    b.HasIndex("CraftingId", "Property")
                        .IsUnique()
                        .HasDatabaseName("ix_crafting_properties_crafting_id_property");

                    b.ToTable("crafting_properties");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Properties.GatheringProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GatheringId")
                        .HasColumnType("uuid")
                        .HasColumnName("gathering_id");

                    b.Property<byte>("Property")
                        .HasColumnType("smallint")
                        .HasColumnName("property");

                    b.Property<long>("Value")
                        .HasColumnType("bigint")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_gathering_properties");

                    b.HasIndex("GatheringId", "Property")
                        .IsUnique()
                        .HasDatabaseName("ix_gathering_properties_gathering_id_property");

                    b.ToTable("gathering_properties");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Seafood", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_seafoods");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_seafoods_name");

                    b.ToTable("seafoods");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Seed", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("GrowthDays")
                        .HasColumnType("bigint")
                        .HasColumnName("growth_days");

                    b.Property<bool>("IsMultiply")
                        .HasColumnType("boolean")
                        .HasColumnName("is_multiply");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<long>("ReGrowthDays")
                        .HasColumnType("bigint")
                        .HasColumnName("re_growth_days");

                    b.Property<byte>("Season")
                        .HasColumnType("smallint")
                        .HasColumnName("season");

                    b.HasKey("Id")
                        .HasName("pk_seeds");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_seeds_name");

                    b.ToTable("seeds");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Transit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte>("Departure")
                        .HasColumnType("smallint")
                        .HasColumnName("departure");

                    b.Property<byte>("Destination")
                        .HasColumnType("smallint")
                        .HasColumnName("destination");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_transits");

                    b.HasIndex("Departure", "Destination")
                        .IsUnique()
                        .HasDatabaseName("ix_transits_departure_destination");

                    b.ToTable("transits");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("About")
                        .HasColumnType("text")
                        .HasColumnName("about");

                    b.Property<bool>("AutoTitleRole")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_title_role");

                    b.Property<string>("CommandColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("command_color");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("Energy")
                        .HasColumnType("bigint")
                        .HasColumnName("energy");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint")
                        .HasColumnName("gender");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean")
                        .HasColumnName("is_premium");

                    b.Property<byte>("Location")
                        .HasColumnType("smallint")
                        .HasColumnName("location");

                    b.Property<long>("Points")
                        .HasColumnType("bigint")
                        .HasColumnName("points");

                    b.Property<byte>("Title")
                        .HasColumnType("smallint")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_users_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserAchievement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_achievements");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_user_achievements_type");

                    b.HasIndex("UserId", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_user_achievements_user_id_type");

                    b.ToTable("user_achievements");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserAlcohol", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AlcoholId")
                        .HasColumnType("uuid")
                        .HasColumnName("alcohol_id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_alcohols");

                    b.HasIndex("AlcoholId")
                        .HasDatabaseName("ix_user_alcohols_alcohol_id");

                    b.HasIndex("UserId", "AlcoholId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_alcohols_user_id_alcohol_id");

                    b.ToTable("user_alcohols");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BannerId")
                        .HasColumnType("uuid")
                        .HasColumnName("banner_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_banners");

                    b.HasIndex("BannerId")
                        .HasDatabaseName("ix_user_banners_banner_id");

                    b.HasIndex("UserId", "BannerId", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("ix_user_banners_user_id_banner_id_is_active");

                    b.ToTable("user_banners");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserBox", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<byte>("Box")
                        .HasColumnType("smallint")
                        .HasColumnName("box");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_boxes");

                    b.HasIndex("UserId", "Box")
                        .IsUnique()
                        .HasDatabaseName("ix_user_boxes_user_id_box");

                    b.ToTable("user_boxes");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserBuilding", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte>("BuildingType")
                        .HasColumnType("smallint")
                        .HasColumnName("building_type");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("Durability")
                        .HasColumnType("bigint")
                        .HasColumnName("durability");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_buildings");

                    b.HasIndex("BuildingType")
                        .HasDatabaseName("ix_user_buildings_building_type");

                    b.HasIndex("UserId", "BuildingType")
                        .IsUnique()
                        .HasDatabaseName("ix_user_buildings_user_id_building_type");

                    b.ToTable("user_buildings");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_collections");

                    b.HasIndex("UserId", "Type", "ItemId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_collections_user_id_type_item_id");

                    b.ToTable("user_collections");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserContract", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid")
                        .HasColumnName("contract_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_contracts");

                    b.HasIndex("ContractId")
                        .HasDatabaseName("ix_user_contracts_contract_id");

                    b.HasIndex("UserId", "ContractId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_contracts_user_id_contract_id");

                    b.ToTable("user_contracts");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserCooldown", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_cooldowns");

                    b.HasIndex("UserId", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_user_cooldowns_user_id_type");

                    b.ToTable("user_cooldowns");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserCrafting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<Guid>("CraftingId")
                        .HasColumnType("uuid")
                        .HasColumnName("crafting_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_craftings");

                    b.HasIndex("CraftingId")
                        .HasDatabaseName("ix_user_craftings_crafting_id");

                    b.HasIndex("UserId", "CraftingId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_craftings_user_id_crafting_id");

                    b.ToTable("user_craftings");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserCrop", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CropId")
                        .HasColumnType("uuid")
                        .HasColumnName("crop_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_crops");

                    b.HasIndex("CropId")
                        .HasDatabaseName("ix_user_crops_crop_id");

                    b.HasIndex("UserId", "CropId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_crops_user_id_crop_id");

                    b.ToTable("user_crops");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserCurrency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte>("Currency")
                        .HasColumnType("smallint")
                        .HasColumnName("currency");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_currencies");

                    b.HasIndex("UserId", "Currency")
                        .IsUnique()
                        .HasDatabaseName("ix_user_currencies_user_id_currency");

                    b.ToTable("user_currencies");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserDrink", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid")
                        .HasColumnName("drink_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_drinks");

                    b.HasIndex("DrinkId")
                        .HasDatabaseName("ix_user_drinks_drink_id");

                    b.HasIndex("UserId", "DrinkId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_drinks_user_id_drink_id");

                    b.ToTable("user_drinks");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_effects");

                    b.HasIndex("UserId", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_user_effects_user_id_type");

                    b.ToTable("user_effects");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserField", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("InReGrowth")
                        .HasColumnType("boolean")
                        .HasColumnName("in_re_growth");

                    b.Property<long>("Number")
                        .HasColumnType("bigint")
                        .HasColumnName("number");

                    b.Property<long>("Progress")
                        .HasColumnType("bigint")
                        .HasColumnName("progress");

                    b.Property<Guid?>("SeedId")
                        .HasColumnType("uuid")
                        .HasColumnName("seed_id");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_fields");

                    b.HasIndex("SeedId")
                        .HasDatabaseName("ix_user_fields_seed_id");

                    b.HasIndex("UserId", "Number")
                        .IsUnique()
                        .HasDatabaseName("ix_user_fields_user_id_number");

                    b.ToTable("user_fields");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserFish", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("FishId")
                        .HasColumnType("uuid")
                        .HasColumnName("fish_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_fishes");

                    b.HasIndex("FishId")
                        .HasDatabaseName("ix_user_fishes_fish_id");

                    b.HasIndex("UserId", "FishId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_fishes_user_id_fish_id");

                    b.ToTable("user_fishes");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserFood", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_foods");

                    b.HasIndex("FoodId")
                        .HasDatabaseName("ix_user_foods_food_id");

                    b.HasIndex("UserId", "FoodId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_foods_user_id_food_id");

                    b.ToTable("user_foods");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserGathering", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("GatheringId")
                        .HasColumnType("uuid")
                        .HasColumnName("gathering_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_gatherings");

                    b.HasIndex("GatheringId")
                        .HasDatabaseName("ix_user_gatherings_gathering_id");

                    b.HasIndex("UserId", "GatheringId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_gatherings_user_id_gathering_id");

                    b.ToTable("user_gatherings");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserHangfireJob", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("job_id");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_hangfire_jobs");

                    b.HasIndex("UserId", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_user_hangfire_jobs_user_id_type");

                    b.ToTable("user_hangfire_jobs");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserMovement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Arrival")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("arrival");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte>("Departure")
                        .HasColumnType("smallint")
                        .HasColumnName("departure");

                    b.Property<byte>("Destination")
                        .HasColumnType("smallint")
                        .HasColumnName("destination");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_movements");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_movements_user_id");

                    b.ToTable("user_movements");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_products");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_user_products_product_id");

                    b.HasIndex("UserId", "ProductId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_products_user_id_product_id");

                    b.ToTable("user_products");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserRecipe", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_recipes");

                    b.HasIndex("FoodId")
                        .HasDatabaseName("ix_user_recipes_food_id");

                    b.HasIndex("UserId", "FoodId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_recipes_user_id_food_id");

                    b.ToTable("user_recipes");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserReferrer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("ReferrerId")
                        .HasColumnType("bigint")
                        .HasColumnName("referrer_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_referrers");

                    b.HasIndex("ReferrerId")
                        .HasDatabaseName("ix_user_referrers_referrer_id");

                    b.HasIndex("UserId", "ReferrerId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_referrers_user_id_referrer_id");

                    b.ToTable("user_referrers");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserReputation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_reputations");

                    b.HasIndex("UserId", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_user_reputations_user_id_type");

                    b.ToTable("user_reputations");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserSeafood", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("SeafoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("seafood_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_seafoods");

                    b.HasIndex("SeafoodId")
                        .HasDatabaseName("ix_user_seafoods_seafood_id");

                    b.HasIndex("UserId", "SeafoodId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_seafoods_user_id_seafood_id");

                    b.ToTable("user_seafoods");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserSeed", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("SeedId")
                        .HasColumnType("uuid")
                        .HasColumnName("seed_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_seeds");

                    b.HasIndex("SeedId")
                        .HasDatabaseName("ix_user_seeds_seed_id");

                    b.HasIndex("UserId", "SeedId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_seeds_user_id_seed_id");

                    b.ToTable("user_seeds");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_statistics");

                    b.HasIndex("UserId", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_user_statistics_user_id_type");

                    b.ToTable("user_statistics");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_titles");

                    b.HasIndex("UserId", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_user_titles_user_id_type");

                    b.ToTable("user_titles");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserTutorial", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte>("Step")
                        .HasColumnType("smallint")
                        .HasColumnName("step");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_tutorials");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_tutorials_user_id");

                    b.ToTable("user_tutorials");
                });

            modelBuilder.Entity("Izumi.Data.Entities.WorldProperty", b =>
                {
                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<long>("Value")
                        .HasColumnType("bigint")
                        .HasColumnName("value");

                    b.HasKey("Type")
                        .HasName("pk_world_properties");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasDatabaseName("ix_world_properties_type");

                    b.ToTable("world_properties");
                });

            modelBuilder.Entity("Izumi.Data.Entities.WorldSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte>("CurrentSeason")
                        .HasColumnType("smallint")
                        .HasColumnName("current_season");

                    b.Property<byte>("WeatherToday")
                        .HasColumnType("smallint")
                        .HasColumnName("weather_today");

                    b.Property<byte>("WeatherTomorrow")
                        .HasColumnType("smallint")
                        .HasColumnName("weather_tomorrow");

                    b.HasKey("Id")
                        .HasName("pk_world_settings");

                    b.ToTable("world_settings");
                });

            modelBuilder.Entity("Izumi.Data.Entities.BuildingIngredient", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Building", "Building")
                        .WithMany("Ingredients")
                        .HasForeignKey("BuildingType")
                        .HasConstraintName("fk_building_ingredients_buildings_building_type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Discord.ContentMessage", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_content_messages_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Discord.ContentVote", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Discord.ContentMessage", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .HasConstraintName("fk_content_votes_content_messages_message_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_content_votes_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Discord.UserMute", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorId")
                        .HasConstraintName("fk_user_mutes_users_moderator_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_mutes_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moderator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Discord.UserRole", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_roles_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Discord.UserVoice", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithOne()
                        .HasForeignKey("Izumi.Data.Entities.Discord.UserVoice", "UserId")
                        .HasConstraintName("fk_user_voices_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Discord.UserWarn", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorId")
                        .HasConstraintName("fk_user_warns_users_moderator_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_warns_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moderator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.DynamicShopBanner", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Banner", "Banner")
                        .WithOne()
                        .HasForeignKey("Izumi.Data.Entities.DynamicShopBanner", "BannerId")
                        .HasConstraintName("fk_dynamic_shop_banners_banners_banner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");
                });

            modelBuilder.Entity("Izumi.Data.Entities.DynamicShopRecipe", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Food", "Food")
                        .WithOne()
                        .HasForeignKey("Izumi.Data.Entities.DynamicShopRecipe", "FoodId")
                        .HasConstraintName("fk_dynamic_shop_recipes_foods_food_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Crop", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Seed", "Seed")
                        .WithOne("Crop")
                        .HasForeignKey("Izumi.Data.Entities.Resource.Crop", "SeedId")
                        .HasConstraintName("fk_crops_seeds_seed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seed");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Ingredients.AlcoholIngredient", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Alcohol", "Alcohol")
                        .WithMany("Ingredients")
                        .HasForeignKey("AlcoholId")
                        .HasConstraintName("fk_alcohol_ingredients_alcohols_alcohol_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alcohol");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Ingredients.CraftingIngredient", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Crafting", "Crafting")
                        .WithMany("Ingredients")
                        .HasForeignKey("CraftingId")
                        .HasConstraintName("fk_crafting_ingredients_craftings_crafting_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crafting");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Ingredients.DrinkIngredient", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Drink", "Drink")
                        .WithMany("Ingredients")
                        .HasForeignKey("DrinkId")
                        .HasConstraintName("fk_drink_ingredients_drinks_drink_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Ingredients.FoodIngredient", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Food", "Food")
                        .WithMany("Ingredients")
                        .HasForeignKey("FoodId")
                        .HasConstraintName("fk_food_ingredients_foods_food_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Properties.AlcoholProperty", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Alcohol", "Alcohol")
                        .WithMany("Properties")
                        .HasForeignKey("AlcoholId")
                        .HasConstraintName("fk_alcohol_properties_alcohols_alcohol_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alcohol");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Properties.CraftingProperty", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Crafting", "Crafting")
                        .WithMany("Properties")
                        .HasForeignKey("CraftingId")
                        .HasConstraintName("fk_crafting_properties_craftings_crafting_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crafting");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Properties.GatheringProperty", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Gathering", "Gathering")
                        .WithMany("Properties")
                        .HasForeignKey("GatheringId")
                        .HasConstraintName("fk_gathering_properties_gatherings_gathering_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gathering");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserAchievement", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("Type")
                        .HasConstraintName("fk_user_achievements_achievements_type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_achievements_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserAlcohol", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Alcohol", "Alcohol")
                        .WithMany()
                        .HasForeignKey("AlcoholId")
                        .HasConstraintName("fk_user_alcohols_alcohols_alcohol_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_alcohols_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alcohol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserBanner", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Banner", "Banner")
                        .WithMany()
                        .HasForeignKey("BannerId")
                        .HasConstraintName("fk_user_banners_banners_banner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_banners_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserBox", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_boxes_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserBuilding", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingType")
                        .HasConstraintName("fk_user_buildings_buildings_building_type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_buildings_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserCollection", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_collections_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserContract", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .HasConstraintName("fk_user_contracts_contracts_contract_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_contracts_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserCooldown", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_cooldowns_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserCrafting", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Crafting", "Crafting")
                        .WithMany()
                        .HasForeignKey("CraftingId")
                        .HasConstraintName("fk_user_craftings_craftings_crafting_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_craftings_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crafting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserCrop", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Crop", "Crop")
                        .WithMany()
                        .HasForeignKey("CropId")
                        .HasConstraintName("fk_user_crops_crops_crop_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_crops_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserCurrency", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_currencies_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserDrink", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .HasConstraintName("fk_user_drinks_drinks_drink_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_drinks_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserEffect", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_effects_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserField", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Seed", "Seed")
                        .WithMany()
                        .HasForeignKey("SeedId")
                        .HasConstraintName("fk_user_fields_seeds_seed_id");

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_fields_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seed");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserFish", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Fish", "Fish")
                        .WithMany()
                        .HasForeignKey("FishId")
                        .HasConstraintName("fk_user_fishes_fishes_fish_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_fishes_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserFood", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .HasConstraintName("fk_user_foods_foods_food_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_foods_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserGathering", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Gathering", "Gathering")
                        .WithMany()
                        .HasForeignKey("GatheringId")
                        .HasConstraintName("fk_user_gatherings_gatherings_gathering_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_gatherings_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gathering");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserHangfireJob", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_hangfire_jobs_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserMovement", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_movements_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserProduct", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_user_products_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_products_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserRecipe", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .HasConstraintName("fk_user_recipes_foods_food_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_recipes_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserReferrer", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "Referrer")
                        .WithMany()
                        .HasForeignKey("ReferrerId")
                        .HasConstraintName("fk_user_referrers_users_referrer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_referrers_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Referrer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserReputation", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_reputations_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserSeafood", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Seafood", "Seafood")
                        .WithMany()
                        .HasForeignKey("SeafoodId")
                        .HasConstraintName("fk_user_seafoods_seafoods_seafood_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_seafoods_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seafood");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserSeed", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Seed", "Seed")
                        .WithMany()
                        .HasForeignKey("SeedId")
                        .HasConstraintName("fk_user_seeds_seeds_seed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_seeds_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seed");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserStatistic", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_statistics_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserTitle", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_titles_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserTutorial", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithOne()
                        .HasForeignKey("Izumi.Data.Entities.User.UserTutorial", "UserId")
                        .HasConstraintName("fk_user_tutorials_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Building", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Alcohol", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Crafting", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Drink", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Food", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Gathering", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Seed", b =>
                {
                    b.Navigation("Crop");
                });
#pragma warning restore 612, 618
        }
    }
}
