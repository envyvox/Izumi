// <auto-generated />
using System;
using System.Collections.Generic;
using Izumi.Data;
using Izumi.Data.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Izumi.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210828061632_AddUserBoxEntity")]
    partial class AddUserBoxEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Izumi.Data.Entities.Banner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<byte>("Rarity")
                        .HasColumnType("smallint")
                        .HasColumnName("rarity");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_banners");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_banners_name");

                    b.ToTable("banners");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Discord.Emote", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_emotes");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_emotes_name");

                    b.ToTable("emotes");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Discord.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_images");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_images_type");

                    b.ToTable("images");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Alcohol", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_alcohols");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_alcohols_name");

                    b.ToTable("alcohols");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Crafting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_craftings");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_craftings_name");

                    b.ToTable("craftings");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Crop", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<Guid>("SeedId")
                        .HasColumnType("uuid")
                        .HasColumnName("seed_id");

                    b.HasKey("Id")
                        .HasName("pk_crops");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_crops_name");

                    b.HasIndex("SeedId")
                        .IsUnique()
                        .HasDatabaseName("ix_crops_seed_id");

                    b.ToTable("crops");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_drinks");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_drinks_name");

                    b.ToTable("drinks");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Fish", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<List<SeasonType>>("CatchSeasons")
                        .IsRequired()
                        .HasColumnType("smallint[]")
                        .HasColumnName("catch_seasons");

                    b.Property<byte>("CatchTimesDay")
                        .HasColumnType("smallint")
                        .HasColumnName("catch_times_day");

                    b.Property<byte>("CatchWeather")
                        .HasColumnType("smallint")
                        .HasColumnName("catch_weather");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<byte>("Rarity")
                        .HasColumnType("smallint")
                        .HasColumnName("rarity");

                    b.HasKey("Id")
                        .HasName("pk_fishes");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_fishes_name");

                    b.ToTable("fishes");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte>("Category")
                        .HasColumnType("smallint")
                        .HasColumnName("category");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("boolean")
                        .HasColumnName("is_special");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("RecipeSellable")
                        .HasColumnType("boolean")
                        .HasColumnName("recipe_sellable");

                    b.HasKey("Id")
                        .HasName("pk_foods");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_foods_name");

                    b.ToTable("foods");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Gathering", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte>("Location")
                        .HasColumnType("smallint")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_gatherings");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_gatherings_name");

                    b.ToTable("gatherings");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Ingredients.AlcoholIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AlcoholId")
                        .HasColumnType("uuid")
                        .HasColumnName("alcohol_id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<byte>("Category")
                        .HasColumnType("smallint")
                        .HasColumnName("category");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid")
                        .HasColumnName("ingredient_id");

                    b.HasKey("Id")
                        .HasName("pk_alcohol_ingredients");

                    b.HasIndex("AlcoholId", "Category", "IngredientId")
                        .HasDatabaseName("ix_alcohol_ingredients_alcohol_id_category_ingredient_id");

                    b.ToTable("alcohol_ingredients");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Ingredients.CraftingIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<byte>("Category")
                        .HasColumnType("smallint")
                        .HasColumnName("category");

                    b.Property<Guid>("CraftingId")
                        .HasColumnType("uuid")
                        .HasColumnName("crafting_id");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid")
                        .HasColumnName("ingredient_id");

                    b.HasKey("Id")
                        .HasName("pk_crafting_ingredients");

                    b.HasIndex("CraftingId", "Category", "IngredientId")
                        .HasDatabaseName("ix_crafting_ingredients_crafting_id_category_ingredient_id");

                    b.ToTable("crafting_ingredients");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Ingredients.DrinkIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<byte>("Category")
                        .HasColumnType("smallint")
                        .HasColumnName("category");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid")
                        .HasColumnName("drink_id");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid")
                        .HasColumnName("ingredient_id");

                    b.HasKey("Id")
                        .HasName("pk_drink_ingredients");

                    b.HasIndex("DrinkId", "Category", "IngredientId")
                        .HasDatabaseName("ix_drink_ingredients_drink_id_category_ingredient_id");

                    b.ToTable("drink_ingredients");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Ingredients.FoodIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<byte>("Category")
                        .HasColumnType("smallint")
                        .HasColumnName("category");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_id");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid")
                        .HasColumnName("ingredient_id");

                    b.HasKey("Id")
                        .HasName("pk_food_ingredients");

                    b.HasIndex("FoodId", "Category", "IngredientId")
                        .HasDatabaseName("ix_food_ingredients_food_id_category_ingredient_id");

                    b.ToTable("food_ingredients");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_products_name");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Properties.AlcoholProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AlcoholId")
                        .HasColumnType("uuid")
                        .HasColumnName("alcohol_id");

                    b.Property<byte>("Property")
                        .HasColumnType("smallint")
                        .HasColumnName("property");

                    b.Property<long>("Value")
                        .HasColumnType("bigint")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_alcohol_properties");

                    b.HasIndex("AlcoholId", "Property")
                        .IsUnique()
                        .HasDatabaseName("ix_alcohol_properties_alcohol_id_property");

                    b.ToTable("alcohol_properties");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Properties.CraftingProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CraftingId")
                        .HasColumnType("uuid")
                        .HasColumnName("crafting_id");

                    b.Property<byte>("Property")
                        .HasColumnType("smallint")
                        .HasColumnName("property");

                    b.Property<long>("Value")
                        .HasColumnType("bigint")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_crafting_properties");

                    b.HasIndex("CraftingId", "Property")
                        .IsUnique()
                        .HasDatabaseName("ix_crafting_properties_crafting_id_property");

                    b.ToTable("crafting_properties");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Properties.GatheringProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GatheringId")
                        .HasColumnType("uuid")
                        .HasColumnName("gathering_id");

                    b.Property<byte>("Property")
                        .HasColumnType("smallint")
                        .HasColumnName("property");

                    b.Property<long>("Value")
                        .HasColumnType("bigint")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_gathering_properties");

                    b.HasIndex("GatheringId", "Property")
                        .IsUnique()
                        .HasDatabaseName("ix_gathering_properties_gathering_id_property");

                    b.ToTable("gathering_properties");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Seafood", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_seafoods");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_seafoods_name");

                    b.ToTable("seafoods");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Seed", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AutoIncrementedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("auto_incremented_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("GrowthDays")
                        .HasColumnType("bigint")
                        .HasColumnName("growth_days");

                    b.Property<bool>("IsMultiply")
                        .HasColumnType("boolean")
                        .HasColumnName("is_multiply");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<long>("ReGrowthDays")
                        .HasColumnType("bigint")
                        .HasColumnName("re_growth_days");

                    b.Property<byte>("Season")
                        .HasColumnType("smallint")
                        .HasColumnName("season");

                    b.HasKey("Id")
                        .HasName("pk_seeds");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_seeds_name");

                    b.ToTable("seeds");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("About")
                        .HasColumnType("text")
                        .HasColumnName("about");

                    b.Property<string>("CommandColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("command_color");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("Energy")
                        .HasColumnType("bigint")
                        .HasColumnName("energy");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint")
                        .HasColumnName("gender");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean")
                        .HasColumnName("is_premium");

                    b.Property<byte>("Location")
                        .HasColumnType("smallint")
                        .HasColumnName("location");

                    b.Property<long>("Points")
                        .HasColumnType("bigint")
                        .HasColumnName("points");

                    b.Property<byte>("Title")
                        .HasColumnType("smallint")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_users_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserAlcohol", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AlcoholId")
                        .HasColumnType("uuid")
                        .HasColumnName("alcohol_id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_alcohols");

                    b.HasIndex("AlcoholId")
                        .HasDatabaseName("ix_user_alcohols_alcohol_id");

                    b.HasIndex("UserId", "AlcoholId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_alcohols_user_id_alcohol_id");

                    b.ToTable("user_alcohols");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BannerId")
                        .HasColumnType("uuid")
                        .HasColumnName("banner_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_banners");

                    b.HasIndex("BannerId")
                        .HasDatabaseName("ix_user_banners_banner_id");

                    b.HasIndex("UserId", "BannerId", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("ix_user_banners_user_id_banner_id_is_active");

                    b.ToTable("user_banners");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserBox", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<byte>("Box")
                        .HasColumnType("smallint")
                        .HasColumnName("box");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_boxes");

                    b.HasIndex("UserId", "Box")
                        .IsUnique()
                        .HasDatabaseName("ix_user_boxes_user_id_box");

                    b.ToTable("user_boxes");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserCrafting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<Guid>("CraftingId")
                        .HasColumnType("uuid")
                        .HasColumnName("crafting_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_craftings");

                    b.HasIndex("CraftingId")
                        .HasDatabaseName("ix_user_craftings_crafting_id");

                    b.HasIndex("UserId", "CraftingId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_craftings_user_id_crafting_id");

                    b.ToTable("user_craftings");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserCrop", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CropId")
                        .HasColumnType("uuid")
                        .HasColumnName("crop_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_crops");

                    b.HasIndex("CropId")
                        .HasDatabaseName("ix_user_crops_crop_id");

                    b.HasIndex("UserId", "CropId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_crops_user_id_crop_id");

                    b.ToTable("user_crops");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserCurrency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte>("Currency")
                        .HasColumnType("smallint")
                        .HasColumnName("currency");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_currencies");

                    b.HasIndex("UserId", "Currency")
                        .IsUnique()
                        .HasDatabaseName("ix_user_currencies_user_id_currency");

                    b.ToTable("user_currencies");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserDrink", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uuid")
                        .HasColumnName("drink_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_drinks");

                    b.HasIndex("DrinkId")
                        .HasDatabaseName("ix_user_drinks_drink_id");

                    b.HasIndex("UserId", "DrinkId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_drinks_user_id_drink_id");

                    b.ToTable("user_drinks");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserFish", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("FishId")
                        .HasColumnType("uuid")
                        .HasColumnName("fish_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_fishes");

                    b.HasIndex("FishId")
                        .HasDatabaseName("ix_user_fishes_fish_id");

                    b.HasIndex("UserId", "FishId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_fishes_user_id_fish_id");

                    b.ToTable("user_fishes");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserFood", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_foods");

                    b.HasIndex("FoodId")
                        .HasDatabaseName("ix_user_foods_food_id");

                    b.HasIndex("UserId", "FoodId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_foods_user_id_food_id");

                    b.ToTable("user_foods");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserGathering", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("GatheringId")
                        .HasColumnType("uuid")
                        .HasColumnName("gathering_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_gatherings");

                    b.HasIndex("GatheringId")
                        .HasDatabaseName("ix_user_gatherings_gathering_id");

                    b.HasIndex("UserId", "GatheringId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_gatherings_user_id_gathering_id");

                    b.ToTable("user_gatherings");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_products");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_user_products_product_id");

                    b.HasIndex("UserId", "ProductId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_products_user_id_product_id");

                    b.ToTable("user_products");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserSeafood", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("SeafoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("seafood_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_seafoods");

                    b.HasIndex("SeafoodId")
                        .HasDatabaseName("ix_user_seafoods_seafood_id");

                    b.HasIndex("UserId", "SeafoodId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_seafoods_user_id_seafood_id");

                    b.ToTable("user_seafoods");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserSeed", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("SeedId")
                        .HasColumnType("uuid")
                        .HasColumnName("seed_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_seeds");

                    b.HasIndex("SeedId")
                        .HasDatabaseName("ix_user_seeds_seed_id");

                    b.HasIndex("UserId", "SeedId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_seeds_user_id_seed_id");

                    b.ToTable("user_seeds");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Crop", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Seed", "Seed")
                        .WithOne()
                        .HasForeignKey("Izumi.Data.Entities.Resource.Crop", "SeedId")
                        .HasConstraintName("fk_crops_seeds_seed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seed");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Ingredients.AlcoholIngredient", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Alcohol", "Alcohol")
                        .WithMany()
                        .HasForeignKey("AlcoholId")
                        .HasConstraintName("fk_alcohol_ingredients_alcohols_alcohol_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alcohol");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Ingredients.CraftingIngredient", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Crafting", "Crafting")
                        .WithMany()
                        .HasForeignKey("CraftingId")
                        .HasConstraintName("fk_crafting_ingredients_craftings_crafting_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crafting");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Ingredients.DrinkIngredient", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .HasConstraintName("fk_drink_ingredients_drinks_drink_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Ingredients.FoodIngredient", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .HasConstraintName("fk_food_ingredients_foods_food_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Properties.AlcoholProperty", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Alcohol", "Alcohol")
                        .WithMany()
                        .HasForeignKey("AlcoholId")
                        .HasConstraintName("fk_alcohol_properties_alcohols_alcohol_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alcohol");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Properties.CraftingProperty", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Crafting", "Crafting")
                        .WithMany()
                        .HasForeignKey("CraftingId")
                        .HasConstraintName("fk_crafting_properties_craftings_crafting_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crafting");
                });

            modelBuilder.Entity("Izumi.Data.Entities.Resource.Properties.GatheringProperty", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Gathering", "Gathering")
                        .WithMany()
                        .HasForeignKey("GatheringId")
                        .HasConstraintName("fk_gathering_properties_gatherings_gathering_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gathering");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserAlcohol", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Alcohol", "Alcohol")
                        .WithMany()
                        .HasForeignKey("AlcoholId")
                        .HasConstraintName("fk_user_alcohols_alcohols_alcohol_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_alcohols_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alcohol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserBanner", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Banner", "Banner")
                        .WithMany()
                        .HasForeignKey("BannerId")
                        .HasConstraintName("fk_user_banners_banners_banner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_banners_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserBox", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_boxes_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserCrafting", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Crafting", "Crafting")
                        .WithMany()
                        .HasForeignKey("CraftingId")
                        .HasConstraintName("fk_user_craftings_craftings_crafting_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_craftings_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crafting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserCrop", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Crop", "Crop")
                        .WithMany()
                        .HasForeignKey("CropId")
                        .HasConstraintName("fk_user_crops_crops_crop_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_crops_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserCurrency", b =>
                {
                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_currencies_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserDrink", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .HasConstraintName("fk_user_drinks_drinks_drink_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_drinks_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserFish", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Fish", "Fish")
                        .WithMany()
                        .HasForeignKey("FishId")
                        .HasConstraintName("fk_user_fishes_fishes_fish_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_fishes_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserFood", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .HasConstraintName("fk_user_foods_foods_food_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_foods_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserGathering", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Gathering", "Gathering")
                        .WithMany()
                        .HasForeignKey("GatheringId")
                        .HasConstraintName("fk_user_gatherings_gatherings_gathering_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_gatherings_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gathering");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserProduct", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_user_products_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_products_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserSeafood", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Seafood", "Seafood")
                        .WithMany()
                        .HasForeignKey("SeafoodId")
                        .HasConstraintName("fk_user_seafoods_seafoods_seafood_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_seafoods_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seafood");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izumi.Data.Entities.User.UserSeed", b =>
                {
                    b.HasOne("Izumi.Data.Entities.Resource.Seed", "Seed")
                        .WithMany()
                        .HasForeignKey("SeedId")
                        .HasConstraintName("fk_user_seeds_seeds_seed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izumi.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_seeds_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seed");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
